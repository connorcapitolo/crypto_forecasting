---
- name: "Create Kubernetes Cluster and deploy multiple containers"
  hosts: localhost
  gather_facts: false

  vars:
    cluster_name: "crypto-forecasting-app-cluster"
    machine_type: "n1-standard-1"
    machine_disk_size: 30
    initial_node_count: 2

  tasks:
  # this is creating a cluster with no machines or anything
  - name: "Create a GKE cluster"
    google.cloud.gcp_container_cluster:
      name: "{{cluster_name}}"
      initial_node_count: "{{ initial_node_count }}"
      location: "{{ gcp_zone }}"
      project: "{{ gcp_project }}"
      release_channel:
        channel: "UNSPECIFIED"
      ip_allocation_policy:
        use_ip_aliases: "yes"
      auth_kind: "{{ gcp_auth_kind }}"
      service_account_file: "{{ gcp_service_account_file }}"
      state: "{{ cluster_state }}"
    register: cluster
  # here, we are creating the nodes (need to have nodes inside the cluster)
  - name: "Create a Node Pool"
    google.cloud.gcp_container_node_pool:
      name: default-pool
      initial_node_count: "{{ initial_node_count }}"
      cluster: "{{ cluster }}"
      location: "{{ gcp_zone }}"
      project: "{{ gcp_project }}"
      config:
        machine_type: "{{ machine_type }}"
        image_type: "COS"
        disk_size_gb: "{{ machine_disk_size }}"
        oauth_scopes:
          - "https://www.googleapis.com/auth/devstorage.read_only"
          - "https://www.googleapis.com/auth/logging.write"
          - "https://www.googleapis.com/auth/monitoring"
          - "https://www.googleapis.com/auth/servicecontrol"
          - "https://www.googleapis.com/auth/service.management.readonly"
          - "https://www.googleapis.com/auth/trace.append"
      autoscaling:
        enabled: "yes"
        # creating the number of nodes that we want
        min_node_count: "1"
        max_node_count: "{{ initial_node_count }}"
      management:
        auto_repair: "yes"
        auto_upgrade: "yes"
      auth_kind: "{{ gcp_auth_kind }}"
      service_account_file: "{{ gcp_service_account_file }}"
      state: "{{ cluster_state }}"
  # allows us to connect to the cluster
  - name: "Connect to cluster (update kubeconfig)"
    shell: "gcloud container clusters get-credentials {{ cluster.name }} --zone {{ gcp_zone }} --project {{ gcp_project }}"
    when: cluster_state == "present"
 # creating an umbrella of a bunch of things for authentication and connecting to each other
  - name: "Create Namespace"
    k8s:
      name: "{{cluster_name}}-namespace"
      api_version: v1
      kind: Namespace
      state: present
    when: cluster_state == "present"

  # helm is a repository for Kubernetes scripts that we can just grab and run
  # there is a script in helm to set up nginx-ingress
  # since we never change this, we take it straight from the repo for Kubernetes scripts
  - name: "Add nginx-ingress helm repo"
    community.kubernetes.helm_repository:
      name: nginx-stable
      repo_url: https://helm.nginx.com/stable
    when: cluster_state == "present"
  # now, we want to install the helm script
  - name: "Install nginx-ingress"
    community.kubernetes.helm:
      name: nginx-ingress
      namespace: "{{cluster_name}}-namespace"
      chart_ref: nginx-stable/nginx-ingress
      state: present
    when: cluster_state == "present"

  - name: "Copy docker tag file"
    copy:
      src: ./docker-tag
      dest: ~/.docker-tag
      mode: 0644
    when: cluster_state == "present"

  - name: "Get docker tag"
    shell: "cat ~/.docker-tag"
    register: tag
    when: cluster_state == "present"

  - name: "Print tag"
    debug:
      var: tag
    when: cluster_state == "present"

  - name: "Store DB Credentials"
    k8s:
      state: present
      definition:
        apiVersion: v1
        kind: Secret
        type: Opaque
        metadata:
          name: db-credentials
          namespace: "{{cluster_name}}-namespace"
        data:
          POSTGRES_USER: bXVzaHJvb21hcHAK # echo "mushroomapp" | base64
          POSTGRES_PASSWORD: YXdlc29tZQo= # echo "awesome" | base64
    when: cluster_state == "present"

  # - name: "Create Persistent Volume"
  #   k8s:
  #     state: present
  #     definition:
  #       apiVersion: v1
  #       kind: PersistentVolume
  #       metadata:
  #         name: db-pv
  #         namespace: "{{cluster_name}}-namespace"
  #         labels:
  #           type: local
  #       spec:
  #         capacity:
  #           storage: 5Gi
  #         storageClassName: standard
  #         accessModes:
  #           - ReadWriteOnce
  #         hostPath:
  #           path: "/data/db-pv"
  #   when: cluster_state == "present"

# creating a persistent volume; this is like a persistent hard drive where we put the secrets/ and peristent-folders/
  - name: "Create Persistent Volume Claim"
    k8s:
      state: present
      definition:
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: postgresql-pvc
          namespace: "{{cluster_name}}-namespace"
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 5Gi
          # volumeName: db-pv
          # storageClassName: standard
    when: cluster_state == "present"

  - name: "Create Deployment for Postgres DB"
    k8s:
      state: present
      definition:
        apiVersion: v1
        kind: Deployment
        metadata:
          name: postgresql
          namespace: "{{cluster_name}}-namespace"
          labels:
            app: postgresql
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: postgresql
          template:
            metadata:
              labels:
                app: postgresql
            spec:
              volumes:
                - name: postgresql-vol
                  persistentVolumeClaim:
                    claimName: postgresql-pvc
              containers:
              - image: postgres:latest
                name: postgresql
                ports:
                  - containerPort: 5432
                env:
                  - name: POSTGRES_USER
                    value: cryp
                  - name: POSTGRES_PASSWORD
                    value: bros
                  - name: POSTGRES_DB
                    value: crypbrosdb
                volumeMounts:
                  - name: postgresql-vol
                    mountPath: /var/lib/postgresql/data
                  
    when: cluster_state == "present"

  - name: "Create NodePort Service Postgres DB"
    k8s:
      state: present
      definition:
        apiVersion: v1
        kind: Service
        metadata:
          name: postgresql
          namespace: "{{cluster_name}}-namespace"
          labels:
            app: postgresql
        spec:
          selector:
            app: postgresql
          type: NodePort
          ports:
          - port: 5432
            targePort: 5432
    when: cluster_state == "present"

  # a deployment is a set of instructions to tell Kubernetes how to install an app
  # deployment is setting up and running in a pod
  - name: "Create Deployment for Frontend"
    k8s:
      state: present
      definition:
        apiVersion: v1
        kind: Deployment
        metadata:
          name: frontend
          namespace: "{{cluster_name}}-namespace"
        spec:
          selector:
            matchLabels:
              run: frontend
          template:
            metadata:
              labels:
                run: frontend
            spec:
              containers:
              - image: "gcr.io/{{ gcp_project }}/crypto-forecasting-frontend-react:{{ tag.stdout}}"
                imagePullPolicy: IfNotPresent
                name: frontend
                ports:
                - containerPort: 80
                  protocol: TCP
    when: cluster_state == "present"

  - name: "Create Deployment for API Service"
    k8s:
      state: present
      definition:
        apiVersion: v1
        kind: Deployment
        metadata:
          name: api1
          namespace: "{{cluster_name}}-namespace"
        spec:
          selector:
            matchLabels:
              run: api1
          template:
            metadata:
              labels:
                run: api1
            spec:
              containers:
              - image: gcr.io/{{ gcp_project }}/crypto-forecasting-api-service:{{ tag.stdout}}
                imagePullPolicy: IfNotPresent
                name: api1
                ports:
                - containerPort: 9000
                  protocol: TCP
    when: cluster_state == "present"

  - name: "Create Deployment for Worker Service"
    k8s:
      state: present
      definition:
        apiVersion: v1
        kind: Deployment
        metadata:
          name: worker
          namespace: "{{cluster_name}}-namespace"
        spec:
          selector:
            matchLabels:
              run: worker
          template:
            metadata:
              labels:
                run: worker
            spec:
              containers:
              - image: gcr.io/{{ gcp_project }}/crypto-forecasting-worker-service:{{ tag.stdout}}
                imagePullPolicy: IfNotPresent
                name: worker
    when: cluster_state == "present"   

    # a service is connecting to the outside world
  - name: "Create Service for Frontend"
    k8s:
      state: present
      definition:
        apiVersion: v1
        kind: Service
        metadata:
          name: frontend
          namespace: "{{cluster_name}}-namespace"
        spec:
          ports:
          - port: 80
            protocol: TCP
            targetPort: 80
          selector:
            run: frontend
          type: NodePort
    when: cluster_state == "present"

  - name: "Create Service for API Service"
    k8s:
      state: present
      definition:
        apiVersion: v1
        kind: Service
        metadata:
          name: api1
          namespace: "{{cluster_name}}-namespace"
        spec:
          ports:
          - port: 9000
            protocol: TCP
            targetPort: 9000
          selector:
            run: api1
          type: NodePort
    when: cluster_state == "present"


  # don't think I should be exposing a port here, but it throws an error if I don't
  # fatal: [localhost]: FAILED! => {"changed": false, "error": 422, "msg": "Service worker: Failed to create object: b'{\"kind\":\"Status\",\"apiVersion\":\"v1\",\"metadata\":{},\"status\":\"Failure\",\"message\":\"Service \\\\\"worker\\\\\" is invalid: spec.ports: Required value\",\"reason\":\"Invalid\",\"details\":{\"name\":\"worker\",\"kind\":\"Service\",\"causes\":[{\"reason\":\"FieldValueRequired\",\"message\":\"Required value\",\"field\":\"spec.ports\"}]},\"code\":422}\\n'", "reason": "Unprocessable Entity", "status": 422}
  # - name: "Create Service for Worker Service"
  #   k8s:
  #     state: present
  #     definition:
  #       apiVersion: v1
  #       kind: Service
  #       metadata:
  #         name: worker
  #         namespace: "{{cluster_name}}-namespace"
  #       spec:
  #         selector:
  #           run: worker
  #   when: cluster_state == "present"

  - name: Wait for Ingress Nginx to get ready
    shell: |
      #!/bin/bash
      kubectl get service nginx-ingress-nginx-ingress --namespace="{{cluster_name}}-namespace" -ojson | jq -r '.status.loadBalancer.ingress[].ip'
    register: nginx_ingress
    delay: 10
    retries: 20
    until: nginx_ingress.stderr == ""
    when: cluster_state == "present"

  - name: Set Nginx Ingress IP
    set_fact:
      nginx_ingress_ip: "{{nginx_ingress.stdout}}"
    when: cluster_state == "present"

  - name: Debug Ingress Nginx IP Address
    debug:
      msg: "Ingress Nginx IP Address: {{ nginx_ingress_ip }}"
    when: cluster_state == "present"

  - name: Debug vars
    debug:
      var: nginx_ingress_ip
      verbosity: 0
    when: cluster_state == "present"

  - name: "Create Ingress Controller"
    k8s:
      state: present
      definition:
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: ingress-resource
          namespace: "{{cluster_name}}-namespace"
          annotations:
            kubernetes.io/ingress.class: "nginx"
            nginx.ingress.kubernetes.io/ssl-redirect: "false"
            nginx.org/rewrites: "serviceName=frontend rewrite=/"
        spec:
          rules:
          - host: "{{ nginx_ingress_ip }}.sslip.io" # Host requires a domain and not just an IP
            http:
              paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: frontend
                    port:
                      number: 80
    when: cluster_state == "present"